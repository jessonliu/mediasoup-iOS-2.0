//
//  JSManager.h
//  WebRtcRoomIOS
//
//  Created by 刘金丰 on 2019/1/16.
//  Copyright © 2019 wjr. All rights reserved.
//

#import <Foundation/Foundation.h>

#import <JavaScriptCore/JavaScriptCore.h>

NS_ASSUME_NONNULL_BEGIN

/**
 CreateAnswerSdp
 @param localSdpObj localSdpObj description
 */
typedef id _Nullable(^CreateAnswerSdp)(NSDictionary *localSdpObj);


/**
 CreateOfferSdp
 @param consumerInfos consumerInfos description
 */
typedef id _Nullable(^CreateOfferSdp)(NSArray *consumerInfos);

@interface JSTransition : NSObject

+ (instancetype)transition;
@property (nonatomic, strong) JSValue *funValue;

- (JSValue *(^)(NSArray *))callWithArguments;

@end

@interface JSCoreBase : NSObject

@property (nonatomic, strong) JSContext *ctx;
- (JSTransition *(^)(SEL))method;

@end


@interface mt_ortc : JSCoreBase


/**
 * Generate extended RTP capabilities for sending and receiving.
 *
 * param {RTCRtpCapabilities} localCaps - Local capabilities.
 * param {RTCRtpCapabilities} remoteCaps - Remote capabilities.
 *
 * return {RTCExtendedRtpCapabilities}
 */
- (NSDictionary *(^)(NSDictionary *, NSDictionary *))getExtendedRtpCapabilities;

/**
 * Generate RTP capabilities for receiving media based on the given extended
 * RTP capabilities.
 *
 * param {NSDictionary} extendedRtpCapabilities
 *
 * return {NSDictionary}
 */
- (NSDictionary *(^)(NSDictionary *))getRtpCapabilities;

- (NSArray *(^)(NSDictionary *, NSArray *, NSDictionary *))getUnsupportedCodecs;


/**
 * Whether media can be sent based on the given RTP capabilities.
 *
 * param NSString kind
 * param NSDictionry extendedRtpCapabilities
 *
 * return BOOL
 */
- (BOOL (^)(NSString *, NSDictionary *))canSend;

/**
 * Whether the given RTP parameters can be received with the given RTP
 * capabilities.
 *
 * param {RTCRtpParameters} rtpParameters
 * param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * return {Boolean}
 */
- (BOOL (^)(NSDictionary *, NSDictionary *))canReceive;

/**
 * Generate RTP parameters of the given kind for sending media.
 * Just the first media codec per kind is considered.
 * NOTE: muxId, encodings and rtcp fields are left empty.
 *
 * param {kind} kind
 * param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * return {RTCRtpParameters}
 */
- (NSDictionary *(^)(NSString *, NSDictionary *))getSendingRtpParameters;


/**
 * Generate RTP parameters of the given kind for receiving media.
 * All the media codecs per kind are considered. This is useful for generating
 * a SDP remote offer.
 * NOTE: muxId, encodings and rtcp fields are left empty.
 *
 * param {String} kind
 * param {RTCExtendedRtpCapabilities} extendedRtpCapabilities
 *
 * return {RTCRtpParameters}
 */
- (NSDictionary *(^)(NSString *, NSDictionary *))getReceivingFullRtpParameters;


@end

@interface mt_edgeUtils : JSCoreBase


@end

@interface mt_planBUtils : JSCoreBase


/**
 param (rtpParameters, sdpObj, track)
 */
- (NSDictionary *(^)(NSDictionary *))fillRtpParametersForTrack;

@end

@interface mt_commonUtils : JSCoreBase
/**
 * Extract DTLS parameters from a SDP.
 *
 * param {Object} sdpObj - SDP Object generated by sdp-transform.
 * return {RTCDtlsParameters}
 */
- (NSDictionary *(^)(NSDictionary *))extractDtlsParameters;

- (NSDictionary *(^)(NSDictionary *))extractRtpCapabilities;

@end

@interface mt_plainRtpUtils : JSCoreBase


@end

@interface mt_RemoteUnifiedPlanSdp : JSCoreBase

+ (instancetype)shareRemoteSdp:(NSString *)direction rtpParametersByKind:(NSDictionary *)rtpParametersByKind;

@property (nonatomic, strong) NSString *direction;
@property (nonatomic, strong) NSDictionary *rtpParametersByKind;
@property (nonatomic, strong) NSMutableDictionary *transportLocalParameters;
@property (nonatomic, strong) NSMutableDictionary *transportRemoteParameters;
@property (nonatomic, strong) NSDictionary *sdpGlobalFields;

- (CreateAnswerSdp)send_createAnswerSdp;

- (CreateOfferSdp)recv_createOfferSdp;

- (void)updateTransportRemoteIceParameters:(NSDictionary *)remoteIceParameters;

@end

@interface mt_RemotePlanBSdp : JSCoreBase

@end

@interface mt_unifiedPlanUtils : JSCoreBase


/**
 param {rtpParameters, sdpObj, track, options}
 */
- (NSDictionary *(^)(NSDictionary *))fillRtpParametersForTrack;

/**
 @{sdp:sdpObj
 track:{@"id":value, @"kind":value},
 mid:string
 }
 */
- (NSDictionary *(^)(NSDictionary *))addPlanBSimulcast;

@end




@interface JSManager : NSObject

+ (instancetype)createJSManager;
@property (nonatomic, strong) mt_ortc *ortc;
@property (nonatomic, strong) mt_edgeUtils *edgeUtils;
@property (nonatomic, strong) mt_planBUtils *planBUtils;
@property (nonatomic, strong) mt_commonUtils *commonUtils;
@property (nonatomic, strong) mt_plainRtpUtils *plainRtpUtils;
@property (nonatomic, strong) mt_RemotePlanBSdp *remotePlanBSdp;
@property (nonatomic, strong) mt_RemoteUnifiedPlanSdp *remoteUnifiedPlanSdp;
@property (nonatomic, strong) mt_unifiedPlanUtils *unifiedPlanUtils;




@end

NS_ASSUME_NONNULL_END
